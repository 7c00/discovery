#!/usr/bin/env ruby

require 'rubygems'
require 'httpclient'
require 'json'

class Discovery

  def initialize(discoveryrc, environment, client = HTTPClient.new)
    @client = client
    
    environment ||= "default"
    value = File.readlines(discoveryrc).map { |l| l.strip.split(/\s*=\s*/, 2) }.select { |k, v| k == environment }.map { |k, v| v }.first
    raise "No such environment '#{environment}'" if value.nil?
    @discovery_uris = value.split(/\s*,\s*/)
  end

  def lookup(protocol, type, pool)
    service_descriptors = nil
    @discovery_uris.each do |discovery_uri|
      begin
        url = "#{discovery_uri}/v1/service/#{type}/#{pool}"
        puts "Getting services at \"#{url}\"" if Verbose
        response = @client.get(url)
        if response.status == HTTP::Status::OK then
          body = response.body
          if body.is_a?(HTTP::Message::Body) then
            body = body.content
          end
          service_descriptors = JSON.parse(body)["services"]
          break
        end
      rescue => e
        # ignored
        p "ERROR:: #{e}" if Verbose
      end
    end

    if service_descriptors.nil? then
      return nil
    end

    return service_descriptors.map { |service_descriptor| service_descriptor['properties'][protocol] }.compact.first
  end
end

begin
  Verbose = !ARGV.delete("--DEBUG").nil? 

  discoveryrc = File.expand_path("~/.discoveryrc")
  unless File.exist?(discoveryrc) then
    File.open(discoveryrc, "w"){ |f| f.puts("default = http://localhost:8080") }
  end
  
  out_args = ARGV.map do |arg| 
    md = /(\w+):\/\/([^\/]+)(\/.*)/.match(arg)
    next arg if md.nil?
  
    protocol, host, path = *md[1..-1]
  
  
    md = /^(?:(\w+)\.)*?(\w+)(?:\.(\w+))?$/.match(host)
    next arg if md.nil?
  
    pool, type, environment = *md[1..-1]
    
    pool ||= "general"  
  
    puts "Looking up service '#{type}' in pool '#{pool}' in environment '#{environment}'" if Verbose
    discovery = Discovery.new(discoveryrc, environment)
    base_url = discovery.lookup(protocol, type, pool)
  
    if base_url.nil? then
      puts "Service type #{type} in pool #{pool} not found"
      exit 42
    end
  
    "#{base_url}#{path}"
  end
  puts "Executing curl #{out_args.map{|v| "\"#{v}\"" }.join(" ")}" if Verbose
  exec "curl", *out_args
  
rescue => e
  puts e.message
  exit 1
end

